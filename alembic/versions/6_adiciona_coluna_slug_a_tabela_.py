"""adiciona coluna slug a tabela apartamentos

Revision ID: 6
Revises: 5
Create Date: 2025-08-18 15:20:14.177890

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector


# revision identifiers, used by Alembic.
revision: str = '6'
down_revision: Union[str, Sequence[str], None] = '5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Obtém o inspector do banco de dados para checar a estrutura atual
    bind = op.get_bind()
    inspector = Inspector.from_engine(bind)

    columns = [col['name'] for col in inspector.get_columns('apartamentos')]

    # ### commands auto generated by Alembic - please adjust! ###
    
    if 'slug' not in columns:
        print("-> A adicionar a coluna 'slug' à tabela 'apartamentos'...")
        op.add_column('apartamentos', sa.Column('slug', sa.Text(), nullable=True))
        print("-> A criar a restrição de unicidade para a coluna 'slug'...")
        op.create_unique_constraint('uq_apartamentos_slug', 'apartamentos', ['slug'])
        print("-> Migração da coluna 'slug' concluída.")
    else:
        print("-> Coluna 'slug' já existe. Pulando a criação.")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    bind = op.get_bind()
    inspector = Inspector.from_engine(bind)
    columns = [col['name'] for col in inspector.get_columns('apartamentos')]
    
    if 'slug' in columns:
        print("-> A remover a restrição de unicidade da coluna 'slug'...")
        op.drop_constraint('uq_apartamentos_slug', 'apartamentos', type_='unique')
        print("-> A remover a coluna 'slug' da tabela 'apartamentos'...")
        op.drop_column('apartamentos', 'slug')
        print("-> Reversão da migração 'slug' concluída.")
    else:
        print("-> Coluna 'slug' não existe. Pulando a remoção.")

    # ### end Alembic commands ###